/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// RDDL MDP version of the Coffe Domain described in original                   //
// OO-MDP paper by Diuk et al. (2008)                                          //
// IMPORTANT : This implementation is only intended to work when there is only //
// a single taxi. Don't instantiate this with more than one taxi.              //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////


domain coffee-fmdp-deterministic {
    requirements {
        reward-deterministic,
        cpf-deterministic,
        preconditions
    };

    types {
        robot          : object;
        loc            : {@office, @lab, @shop, @mail};

    };

    pvariables {
    //////////////////////////////// States /////////////////////////////////
    // Position variables
        robot-location(robot)          : { state-fluent, loc, default = @office };
        is-raining(robot)              : { state-fluent, bool, default = false };
        has-umbrella(robot)            : { state-fluent, bool, default = false };
        has-coffee(robot)              : { state-fluent, bool, default = false };
        has-bun(robot)                 : { state-fluent, bool, default = false };
        has-mail(robot)                : { state-fluent, bool, default = false };
        is-wet(robot)                  : { state-fluent, bool, default = false };
        user-has-coffee(robot)                : { state-fluent, bool, default = false };
        user-has-bun(robot)                   : { state-fluent, bool, default = false };
        MW(robot)                             : { state-fluent, bool, default = false };


    //////////////////////////////// Actions ////////////////////////////////
        move_left(robot)                     : { action-fluent, bool, default = false };
        move_right(robot)                    : { action-fluent, bool, default = false };
        del_food(robot)                      : { action-fluent, bool, default = false };
        buy_coffee(robot)                    : { action-fluent, bool, default = false };
        buy_bun(robot)                       : { action-fluent, bool, default = false };
        get_mail(robot)                      : { action-fluent, bool, default = false };
        del_mail(robot)                      : { action-fluent, bool, default = false };


    };

    cdfs {
    // Movement Transition functions
      robot-location'(?r) =
        if(move_left(?r) & robot-location(?r) == @office)
          then @lab
        else if(move_left(?r) & robot-location(?r) == @lab)
          then @shop
        else if(move_left(?r) & robot-location(?r) == @mail)
          then @office

        else if(move_right(?r) & robot-location(?r) == @office)
          then @mail
        else if(move_right(?r) & robot-location(?r) == @lab)
            then @office
        else if(move_right(?r) & robot-location(?r) == @shop)
              then @lab
        else if(move_right(?r) & robot-location(?r) == @mail)
                then @shop
        else robot-location(?r);

      is-wet'(?r) =
        if(move_left(?r) & is-raining(?r) & ~has-umbrella(?r))
          then true
        else if(move_left(?r) & is-raining(?r) & ~has-umbrella(?r))
          then true
        else is-wet(?r);

      has-umbrella'(?r) = has-umbrella(?r);

      is-raining'(?r) = is-raining(?r);

      MW'(?r) =
        if(get_mail(?r) & robot-location(?r) == @mail & MW(?r))
          then false
        else true;

      has-mail'(?r) =
        if(get_mail(?r) & robot-location(?r) == @mail & MW(?r))
          then true
        else if(del_mail(?r) & robot-location(?r) == @office & has-mail(?r))
          then false
        else has-mail(?r);

      user-has-coffee'(?r) =
        if(del_food(?r) & robot-location(?r) == @office & has-coffee(?r))
          then true
        else false;

      user-has-bun'(?r) =
          if(del_food(?r) & robot-location(?r) == @office & has-bun(?r))
            then true
          else false;

      has-coffee'(?r) =
        if(del_food(?r) & robot-location(?r) == @office & has-coffee(?r))
          then false
        else if(buy_coffee(?r) & robot-location(?r) == @shop)
          then true
        else if(buy_bun(?r) & robot-location(?r) == @shop & has-coffee(?r))
          then false
        else has-coffee(?r);

      has-bun'(?r) =
        if(del_food(?r) & robot-location(?r) == @office & has-bun(?r))
          then false
        else if(buy_coffee(?r) & robot-location(?r) == @shop & has-bun(?r))
          then false
        else if(buy_bun(?r) & robot-location(?r) == @shop)
          then true
        else has-bun(?r);
      };

    reward =
        if(exists_{?r : robot} [user-has-coffee(?r)])
          then 1.0
        else
          -0.1;


    action-preconditions {
    // there can only be one move per turn
          ( forall_{ ?r : robot } [move_left(?r) + move_right(?r) + del_food(?r) + buy_bun(?r) + buy_coffee(?r) + get_mail(?r) + del_mail(?r)] <= 1 ) ;

    };
}
