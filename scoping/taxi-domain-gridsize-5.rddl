/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// RDDL MDP version of the Taxi Domain described in original                   //
// OO-MDP paper by Diuk et al. (2008)                                          //
// IMPORTANT : This implementation is only intended to work when there is only //
// a single taxi. Don't instantiate this with more than one taxi.              //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////


domain taxi-oo_mdp {
    requirements {
        reward-deterministic,
        cpf-deterministic,
        preconditions
    };

    types {
        taxi          : object;
        passenger     : object;
        number        : { @0, @1, @2, @3, @4 };
    };

    pvariables {
    //////////////////////////////// States /////////////////////////////////
    // Position variables
        taxi-x(taxi)                   : { state-fluent, number, default = @0 };
        taxi-y(taxi)                   : { state-fluent, number, default = @0 };
        passenger-x-curr(passenger)    : { state-fluent, number, default = @0 };
        passenger-y-curr(passenger)    : { state-fluent, number, default = @0 };

    // Taxi occupied variables
        passenger-in-taxi(passenger, taxi)          : { state-fluent, bool, default=false };

    //////////////////////////////// Actions ////////////////////////////////
        move_north                           : { action-fluent, bool, default = false };
        move_south                           : { action-fluent, bool, default = false };
        move_east                            : { action-fluent, bool, default = false };
        move_west                            : { action-fluent, bool, default = false };
        pickup(passenger)                    : { action-fluent, bool, default = false };
        dropoff(passenger)                   : { action-fluent, bool, default = false };

    //////////////////////////////// Non-Fluents ////////////////////////////////

    // TAXI_GOAL deterministic
//        TAXI_GOAL(xpos, ypos)                        : { non-fluent, bool, default = false };

    // Passenger Goal location
        PASSENGER_GOAL_X(passenger)    : { non-fluent, number, default = @0 };
        PASSENGER_GOAL_Y(passenger)    : { non-fluent, number, default = @0 };

    // Passengers whom you actually need to drop off (i.e, get reward for)
        PASSENGERS_YOU_CARE_FOR(passenger)           : {non-fluent, bool, default = false };


    };

    cdfs {
    // Pickup and Dropoff Transition function
        passenger-in-taxi'(?p, ?t) =
            // If there is no passenger in the taxi, the taxi is on the passenger and the agent executes pickup, make true
                // if ( pickup(?p) & ( taxi-x(?t) == passenger-x-curr(?p) ) & ( taxi-y(?t) == passenger-y-curr(?p) ) & ( ~exists_{ ?p1 : passenger } [ passenger-in-taxi( ?p1, ?t ) ] ) )
            if ( pickup(?p) & ( taxi-x(?t) == passenger-x-curr(?p) ) & ( taxi-y(?t) == passenger-y-curr(?p) ) & ( forall_{ ?p1 : passenger } [ ~passenger-in-taxi( ?p1, ?t ) ] ) )
                then true

            // If there is this passenger in the taxi and the agent executes the dropoff action, make false
            else if ( dropoff(?p) & passenger-in-taxi(?p, ?t ) )
                then false

            // Else, the value of passenger-in-taxi is whatever it used to be
            else passenger-in-taxi(?p, ?t);

    //  Movement transition functions
        taxi-x'(?t) =
            if ((move_west) & (taxi-x(?t) == @1))
            	then @0
            else if ((move_west) & (taxi-x(?t) == @2))
            	then @1
            else if ((move_west) & (taxi-x(?t) == @3))
            	then @2
            else if ((move_west) & (taxi-x(?t) == @4))
            	then @3
            else if ((move_east) & (taxi-x(?t) == @0))
            	then @1
            else if ((move_east) & (taxi-x(?t) == @1))
            	then @2
            else if ((move_east) & (taxi-x(?t) == @2))
            	then @3
            else if ((move_east) & (taxi-x(?t) == @3))
            	then @4
            else taxi-x(?t);

        taxi-y'(?t) =
            if ((move_north) & (taxi-y(?t) == @0))
            	then @1
            else if ((move_north) & (taxi-y(?t) == @1))
            	then @2
            else if ((move_north) & (taxi-y(?t) == @2))
            	then @3
            else if ((move_north) & (taxi-y(?t) == @3))
            	then @4
            else if ((move_south) & (taxi-y(?t) == @1))
            	then @0
            else if ((move_south) & (taxi-y(?t) == @2))
            	then @1
            else if ((move_south) & (taxi-y(?t) == @3))
            	then @2
            else if ((move_south) & (taxi-y(?t) == @4))
            	then @3
            else taxi-y(?t);

        passenger-x-curr'(?p) =
            if ((move_west & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @1))
            	then @0
            else if ((move_west & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @2))
            	then @1
            else if ((move_west & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @3))
            	then @2
            else if ((move_west & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @4))
            	then @3
            else if ((move_east & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @0))
            	then @1
            else if ((move_east & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @1))
            	then @2
            else if ((move_east & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @2))
            	then @3
            else if ((move_east & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-x-curr(?p) == @3))
            	then @4
            else passenger-x-curr(?p);

        passenger-y-curr'(?p) =
            if ((move_north & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @0))
            	then @1
            else if ((move_north & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @1))
            	then @2
            else if ((move_north & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @2))
            	then @3
            else if ((move_north & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @3))
            	then @4
            else if ((move_south & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @1))
            	then @0
            else if ((move_south & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @2))
            	then @1
            else if ((move_south & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @3))
            	then @2
            else if ((move_south & exists_{ ?t : taxi } [ passenger-in-taxi( ?p, ?t ) ]) & (passenger-y-curr(?p) == @4))
            	then @3
            else passenger-y-curr(?p);

    };

    reward =
          if ( forall_{ ?p : passenger } [ ~PASSENGERS_YOU_CARE_FOR(?p) | ( forall_{ ?t : taxi} [ ~passenger-in-taxi(?p, ?t) ]   & (passenger-x-curr(?p) == PASSENGER_GOAL_X(?p) & (passenger-y-curr(?p) == PASSENGER_GOAL_Y(?p) ) ) ) ] )
              then 5
          else -1;

    action-preconditions {
    // there can only be one move per turn
          ( forall_{ ?t : taxi } [move_west + move_east + move_south + move_north +
                                  ( sum_{ ?p : passenger } [pickup(?p) + dropoff(?p)] ) ] <= 1 ) ;
    //    ( forall_{ ?t : taxi} [move_west + move_east + move_southt) + move_north <= 1] ) ;

    // don't move outside of the grid
        forall_{ ?t : taxi } [ move_west => taxi-x(?t) ~= @0 ];
        forall_{ ?t : taxi } [ move_east => taxi-x(?t) ~= @4 ];
        forall_{ ?t : taxi } [ move_north => taxi-y(?t) ~= @4 ];
        forall_{ ?t : taxi } [ move_south => taxi-y(?t) ~= @0 ];

    };
    state-action-constraints {

    };
}
